export type Start = {
    /**
     * id of the graph to start
     */
    graph: string,
    /**
     * access token to authorize user
     */
    secret?: string,
}

export type Started = {
    /**
   * time when the network was stopped
   */
    time: string,
    /**
     * graph the action targets
     */
    graph: string

    started: boolean
    running: boolean
    debug: boolean
}

/**
 * Response to a getstatus message.
 */
export type Status = {
    /**
     * graph the action targets
     */
    graph: string,
    /**
     * time the network has been running, in seconds
     */
    uptime: number,
    /**
     * whether or not network has started running
     */
    started: boolean,
    /**
     * boolean tells whether the network is running or not
     */
    running: boolean,
    /**
     * whether or not network is in debug mode
     */
    debug: boolean,
}

/**
 * Sets a networks debug mode 
 */
export type Debug = {
    enable: boolean
    /**
     * access token to authorize user
     */
    secret?: string,
    /**
     * id of the graph
     */
    graph: string,

}

export type Error = {
    message: string
}

/**
 * Inform that a given network has stopped.
 */
export type Stopped = {

    /**
     * time when the network was stopped
     */
    time: string,
    /**
     * time the network was running, in seconds
     */
    uptime: number
    /**
     * graph the action targets
     */
    graph: string,
    /**
     * whether or not network is currently running
     */
    running: boolean,
    /**
     * whether or not network has been started
     */
    started: boolean,
    /**
     * whether or not network is in debug mode
     */
    debug: boolean
}

/**
 * Tells the runtime to persist the current state of graphs and components so that they are available between restarts. Requires the network:persist capability.
 */
export type Persist = {
    secret?: string
}

/**
 * List of edges user has selected for inspection in a user interface or debugger, sent from UI to a runtime.
 */
export type Edges = {
    graph: string,
    secret?: string,
    edges: {
        src: {
            node: string,
            port: string,
            /**
             * Connection index, for addressable ports
             * Note that we use this for variadic ports
             */
            index: number
        },
        tgt: {
            node: string,
            port: string,
            /**
             * Connection index, for addressable ports
             * Note that we use this for variadic ports
             */
            index: number
        }
    }[]
}


/**
 * An output message from a running network, roughly similar to STDOUT output of a Unix process, or a line of console.log in JavaScript. Output can also be used for passing images from the runtime to the UI.'
 */
export type Output = {
    /**
     * contents of the output line
     */
    message: string,
    /**
     * type of output, either message or previewurl
     */
    type: string,
    /**
     * URL for an image generated by the runtime
     */
    url?: string
}

/**
 * When in debug mode, a network can signal an error happening inside a process.
 */
export type ProcessError = {
    /**
     * identifier of the node
     */
    id: string,
    /**
     * error from the component
     */
    error: string,
    /**
     * graph the action targets
     */
    graph: string
}

/**
 * Data transmission on an edge.
 */
export type Data = {
    /**
     * Edge ID
     */
    id: string,
    src: {
        node: string,
        port: string,
        /**
         * Connection index, for addressable ports
         * Note that we use this for variadic ports
         */
        index?: number
    },
    tgt: {
        node: string,
        port: string,
        /**
         * Connection index, for addressable ports
         * Note that we use this for variadic ports
         */
        index?: number
    },
    graph: string,
    /**
     * Subgraph identifier for the event. An array of node IDs.
     */
    subgraph: string[]
}