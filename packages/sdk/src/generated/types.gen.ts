// This file is auto-generated by @hey-api/openapi-ts

/**
 * The created graph
 */
export type CreatedGraph = {
    id: string;
};

/**
 * Construct a type with a set of properties K of type T
 */
export type Record_string_any_ = {
    [key: string]: (unknown) | undefined;
};

export type SchemaObject = {
    id?: string;
    $id?: string;
    $schema?: string;
    $async?: boolean;
    [key: string]: (unknown) | undefined;
};

export type GraphSchema = SchemaObject;

export type TypeDefinition = {
    type: SchemaObject;
    /**
     * When exposing an array of inputs or outputs, allow specific control for connecting each item
     */
    variadic?: boolean;
    /**
     * Whether the input is visible by default in the UI
     */
    visible?: boolean;
    /**
     * Additional annotations to store on the input
     */
    annotations?: Record_string_any_;
};

export type SerializedInput = {
    name: string;
    value?: unknown;
    visible: boolean;
    variadic?: boolean;
    type: TypeDefinition;
    dynamicType?: SchemaObject;
    annotations?: Record_string_any_;
};

export type SerializedNode = {
    id: string;
    annotations?: Record_string_any_;
    type: string;
    inputs: Array<SerializedInput>;
};

export type SerializedEdge = {
    id: string;
    source: string;
    target: string;
    sourceHandle: string;
    targetHandle: string;
    annotations?: Record_string_any_;
};

export type SerializedGraph = {
    annotations: Record_string_any_;
    nodes: Array<SerializedNode>;
    edges: Array<SerializedEdge>;
};

export type SerializedGraphVal = SerializedGraph;

export type GraphCreationParams = {
    /**
     * A human readable description of the graph
     */
    description?: string;
    /**
     * The json serialized graph
     */
    graph: SerializedGraph;
    /**
     * A human readable name for the graph
     */
    name: string;
};

/**
 * From T, pick a set of properties whose keys are in the union K
 */
export type Pick_Graph_Exclude_keyofGraph_graph__ = {
    id: string;
    name: string;
    owner: string;
    createdAt: string;
    updatedAt: string;
};

/**
 * Construct a type with the properties of T except for those in type K.
 */
export type Omit_Graph_graph_ = Pick_Graph_Exclude_keyofGraph_graph__;

export type ListedGraph = Omit_Graph_graph_;

export type ListGraphParams = {
    perPage?: number;
    page?: number;
};

export type Graph = {
    updatedAt: string;
    createdAt: string;
    owner: string;
    graph: SerializedGraph;
    name: string;
    id: string;
};

export type InvokeableInputDefinition = {
    type?: SchemaObject;
    value: unknown;
};

/**
 * Construct a type with a set of properties K of type T
 */
export type Record_string_InvokeableInputDefinition_ = {
    [key: string]: InvokeableInputDefinition;
};

export type InvokeParams = {
    graphId: string;
    payload: Record_string_InvokeableInputDefinition_;
};

export type PaginatedParams = {
    perPage?: number;
    page?: number;
};

export type CredentialCreationParams = unknown;

export type PaginatedListCredsParams = {
    perPage?: number;
    page?: number;
};

export type $OpenApiTs = {
    '/graph': {
        post: {
            req: {
                requestBody: GraphCreationParams;
            };
            res: {
                201: CreatedGraph;
            };
        };
        get: {
            req: {
                page?: number;
                perPage?: number;
            };
            res: {
                200: Array<Omit_Graph_graph_>;
            };
        };
    };
    '/graph/{graphId}': {
        put: {
            req: {
                graphId: string;
                requestBody: GraphCreationParams;
            };
            res: {
                200: unknown;
                /**
                 * Graph not found
                 */
                404: unknown;
            };
        };
        get: {
            req: {
                graphId: string;
            };
            res: {
                200: Graph;
                /**
                 * Graph not found
                 */
                404: unknown;
            };
        };
        delete: {
            req: {
                graphId: string;
            };
            res: {
                200: unknown;
                /**
                 * Graph not found
                 */
                404: unknown;
            };
        };
    };
    '/executions': {
        post: {
            req: {
                requestBody: InvokeParams;
            };
            res: {
                /**
                 * No content
                 */
                204: void;
            };
        };
        get: {
            req: {
                page?: number;
                perPage?: number;
            };
            res: {
                200: unknown;
            };
        };
    };
    '/executions/{id}': {
        get: {
            req: {
                id: string;
            };
            res: {
                200: unknown;
            };
        };
    };
    '/executions/{id}/artifacts/{artifactId}': {
        get: {
            req: {
                artifactId: string;
                id: string;
            };
            res: {
                /**
                 * No content
                 */
                204: void;
            };
        };
    };
    '/executions/{id}/logs/{artifactId}': {
        get: {
            req: {
                artifactId: string;
                id: string;
            };
            res: {
                /**
                 * No content
                 */
                204: void;
            };
        };
    };
    '/credentials': {
        post: {
            req: {
                requestBody: CredentialCreationParams;
            };
            res: {
                /**
                 * No content
                 */
                204: void;
            };
        };
        get: {
            req: {
                page?: number;
                perPage?: number;
            };
            res: {
                200: unknown;
            };
        };
    };
    '/credentials/{id}': {
        get: {
            req: {
                id: string;
            };
            res: {
                200: unknown;
            };
        };
        delete: {
            req: {
                id: string;
            };
            res: {
                200: unknown;
                /**
                 * Credential not found
                 */
                404: unknown;
            };
        };
    };
};