name: Release

on:
  push:
    branches:
      - master

# Sets permissions of the GITHUB_TOKEN
permissions:
  contents: write
  pages: write
  id-token: write
  pull-requests: write

jobs:
  release:
    # Prevents changesets action from creating a PR on forks
    if: github.repository == 'tokens-studio/graph-engine'
    environment:
      name: prod
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          # This makes Actions fetch all Git history so that Changesets can generate changelogs with the correct commits
          fetch-depth: 0

      - name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "yarn"

      - name: Install dependencies
        run: yarn  --frozen-lockfile --prefer-offline

      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ vars.VAULT_URL }}
          role: ${{ vars.VAULT_ROLE }}
          method: jwt
          namespace: admin
          secrets: |
            ${{ vars.VAULT_PATH }} TOKEN | NPM_TOKEN;

      - name: Create Release Pull Request or Publish to npm
        id: changesets
        uses: changesets/action@v1
        with:
          # This expects you to have a script called release which does a build for your packages and calls changeset publish
          publish: npm run release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ steps.secrets.outputs.NPM_TOKEN }}
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        if: steps.changesets.outputs.published == 'true'
        env:
          SLACK_CHANNEL: proj-resolvers-generators
          SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
          SLACK_ICON: https://github.com/rtCamp.png?size=48
          SLACK_MESSAGE: 'New version of the graph-engine has been release'
          SLACK_TITLE: "@tokens-studio/graph-engine"
          SLACK_USERNAME: "Studio Bot"
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
  release-ui:
    # Prevents changesets action from creating a PR on forks
    if: github.repository == 'tokens-studio/graph-engine'
    environment:
      name: dev
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "yarn"

      - name: Install dependencies
        run: yarn  --frozen-lockfile --prefer-offline

      - name: Build site
        run: yarn run build:ui
        env:
          NEXT_PUBLIC_GITHUB_SHA: $GITHUB_SHA

      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ vars.VAULT_URL }}
          role: ${{ vars.VAULT_DEPLOY_ROLE }}
          method: jwt
          namespace: admin
          secrets: |
            aws/dev/creds/${{ vars.DEV_SITE_DEPLOY_ROLE }} access_key | AWS_ACCESS_KEY_ID ;
            aws/dev/creds/${{ vars.DEV_SITE_DEPLOY_ROLE }} secret_key | AWS_SECRET_ACCESS_KEY ;
            aws/dev/creds/${{ vars.DEV_SITE_DEPLOY_ROLE }} security_token |  AWS_SESSION_TOKEN;
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ steps.secrets.outputs.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ steps.secrets.outputs.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ steps.secrets.outputs.AWS_SESSION_TOKEN }}
          aws-region: us-east-1
      - name: Copy files to the production website with the AWS CLI
        run: |
          aws s3 sync ./packages/ui/out ${{ vars.DEV_SITE_BUCKET_NAME }}

  publish-tauri:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04' # for Tauri v1 you could replace this with ubuntu-20.04.
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.settings.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/16

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.settings.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: install dependencies (ubuntu only)
        if: matrix.settings.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
        # webkitgtk 4.0 is for Tauri v1 - webkitgtk 4.1 is for Tauri v2.
        # You can remove the one that doesn't apply to your app to speed up the workflow a bit.

      - name: Install dependencies
        run: yarn  --frozen-lockfile --prefer-offline


      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: 'App v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          projectPath: ./packages/ui
          args: ${{ matrix.settings.args }}