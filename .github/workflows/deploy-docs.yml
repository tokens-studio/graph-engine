name: "Deploy-to-docs-site"

on:
  workflow_dispatch:
  push:
    branches: [ "master"]

permissions:
  contents: read

jobs:
  build:
    name: "Build"
    runs-on: ubuntu-latest
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
    steps:
      #2: Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3
        with:
          lfs: true
      - name: Checkout LFS objects
        run: git lfs checkout
      - name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "yarn"

      - name: Install dependencies
        run: yarn  --frozen-lockfile --prefer-offline

      # 4: Get the Next cache for faster builds
      - name: Get Next Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/packages/documentation/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
      # 5: Build output to `out`
      - name: Build Package
        run: npm run build:docs
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: output
          path: ./packages/documentation/out

  deployment:
    needs: build
    name: "Deployment"
    runs-on: ubuntu-latest
    environment:
      name: docs
      url: https://docs.graph.tokens.studio/
    permissions:
      contents: read
      id-token: write
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: output
          path: ./out
      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ vars.VAULT_URL }}
          role: ${{ vars.VAULT_ROLE }}
          method: jwt
          namespace: admin
          # We need the Terraform API token to interact with terraform cloud with the state storage is
          secrets: |
            aws/prod/creds/${{ vars.DEPLOY_ROLE }} access_key | AWS_ACCESS_KEY_ID ;
            aws/prod/creds/${{ vars.DEPLOY_ROLE }} secret_key | AWS_SECRET_ACCESS_KEY ;
            aws/prod/creds/${{ vars.DEPLOY_ROLE }} security_token |  AWS_SESSION_TOKEN;
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ steps.secrets.outputs.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ steps.secrets.outputs.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ steps.secrets.outputs.AWS_SESSION_TOKEN }}
          aws-region: us-east-1
      - name: Copy files to the production website with the AWS CLI
        run: |
          aws s3 sync ./out ${{ vars.S3_BUCKET }}
